<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MessagePack.UniversalCodeGenerator</name>
    </assembly>
    <members>
        <member name="T:MessagePack.CodeGenerator.Generator.EnumTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.EnumTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:MessagePack.CodeGenerator.Generator.EnumTemplateBase">
            <summary>
            Base class for this transformation
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.EnumTemplateBase.GenerationEnvironment">
            <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.EnumTemplateBase.Errors">
            <summary>
            The error collection for the generation process
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.EnumTemplateBase.indentLengths">
            <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.EnumTemplateBase.CurrentIndent">
            <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.EnumTemplateBase.Session">
            <summary>
            Current transformation session
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.EnumTemplateBase.Write(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.EnumTemplateBase.WriteLine(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.EnumTemplateBase.Write(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.EnumTemplateBase.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.EnumTemplateBase.Error(System.String)">
            <summary>
            Raise an error
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.EnumTemplateBase.Warning(System.String)">
            <summary>
            Raise a warning
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.EnumTemplateBase.PushIndent(System.String)">
            <summary>
            Increase the indent
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.EnumTemplateBase.PopIndent">
            <summary>
            Remove the last indent that was added with PushIndent
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.EnumTemplateBase.ClearIndent">
            <summary>
            Remove any indentation
            </summary>
        </member>
        <member name="T:MessagePack.CodeGenerator.Generator.EnumTemplateBase.ToStringInstanceHelper">
            <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.EnumTemplateBase.ToStringInstanceHelper.FormatProvider">
            <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.EnumTemplateBase.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
            <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.EnumTemplateBase.ToStringHelper">
            <summary>
            Helper to produce culture-oriented representation of an object as a string
            </summary>
        </member>
        <member name="T:MessagePack.CodeGenerator.Generator.FormatterTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.FormatterTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:MessagePack.CodeGenerator.Generator.FormatterTemplateBase">
            <summary>
            Base class for this transformation
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.FormatterTemplateBase.GenerationEnvironment">
            <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.FormatterTemplateBase.Errors">
            <summary>
            The error collection for the generation process
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.FormatterTemplateBase.indentLengths">
            <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.FormatterTemplateBase.CurrentIndent">
            <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.FormatterTemplateBase.Session">
            <summary>
            Current transformation session
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.FormatterTemplateBase.Write(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.FormatterTemplateBase.WriteLine(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.FormatterTemplateBase.Write(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.FormatterTemplateBase.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.FormatterTemplateBase.Error(System.String)">
            <summary>
            Raise an error
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.FormatterTemplateBase.Warning(System.String)">
            <summary>
            Raise a warning
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.FormatterTemplateBase.PushIndent(System.String)">
            <summary>
            Increase the indent
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.FormatterTemplateBase.PopIndent">
            <summary>
            Remove the last indent that was added with PushIndent
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.FormatterTemplateBase.ClearIndent">
            <summary>
            Remove any indentation
            </summary>
        </member>
        <member name="T:MessagePack.CodeGenerator.Generator.FormatterTemplateBase.ToStringInstanceHelper">
            <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.FormatterTemplateBase.ToStringInstanceHelper.FormatProvider">
            <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.FormatterTemplateBase.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
            <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.FormatterTemplateBase.ToStringHelper">
            <summary>
            Helper to produce culture-oriented representation of an object as a string
            </summary>
        </member>
        <member name="T:MessagePack.CodeGenerator.Generator.ResolverTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.ResolverTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:MessagePack.CodeGenerator.Generator.ResolverTemplateBase">
            <summary>
            Base class for this transformation
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.ResolverTemplateBase.GenerationEnvironment">
            <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.ResolverTemplateBase.Errors">
            <summary>
            The error collection for the generation process
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.ResolverTemplateBase.indentLengths">
            <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.ResolverTemplateBase.CurrentIndent">
            <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.ResolverTemplateBase.Session">
            <summary>
            Current transformation session
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.ResolverTemplateBase.Write(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.ResolverTemplateBase.WriteLine(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.ResolverTemplateBase.Write(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.ResolverTemplateBase.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.ResolverTemplateBase.Error(System.String)">
            <summary>
            Raise an error
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.ResolverTemplateBase.Warning(System.String)">
            <summary>
            Raise a warning
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.ResolverTemplateBase.PushIndent(System.String)">
            <summary>
            Increase the indent
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.ResolverTemplateBase.PopIndent">
            <summary>
            Remove the last indent that was added with PushIndent
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.ResolverTemplateBase.ClearIndent">
            <summary>
            Remove any indentation
            </summary>
        </member>
        <member name="T:MessagePack.CodeGenerator.Generator.ResolverTemplateBase.ToStringInstanceHelper">
            <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.ResolverTemplateBase.ToStringInstanceHelper.FormatProvider">
            <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.ResolverTemplateBase.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
            <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.ResolverTemplateBase.ToStringHelper">
            <summary>
            Helper to produce culture-oriented representation of an object as a string
            </summary>
        </member>
        <member name="T:MessagePack.CodeGenerator.Generator.UnionTemplate">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.UnionTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="T:MessagePack.CodeGenerator.Generator.UnionTemplateBase">
            <summary>
            Base class for this transformation
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.UnionTemplateBase.GenerationEnvironment">
            <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.UnionTemplateBase.Errors">
            <summary>
            The error collection for the generation process
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.UnionTemplateBase.indentLengths">
            <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.UnionTemplateBase.CurrentIndent">
            <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.UnionTemplateBase.Session">
            <summary>
            Current transformation session
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.UnionTemplateBase.Write(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.UnionTemplateBase.WriteLine(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.UnionTemplateBase.Write(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.UnionTemplateBase.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.UnionTemplateBase.Error(System.String)">
            <summary>
            Raise an error
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.UnionTemplateBase.Warning(System.String)">
            <summary>
            Raise a warning
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.UnionTemplateBase.PushIndent(System.String)">
            <summary>
            Increase the indent
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.UnionTemplateBase.PopIndent">
            <summary>
            Remove the last indent that was added with PushIndent
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.UnionTemplateBase.ClearIndent">
            <summary>
            Remove any indentation
            </summary>
        </member>
        <member name="T:MessagePack.CodeGenerator.Generator.UnionTemplateBase.ToStringInstanceHelper">
            <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.UnionTemplateBase.ToStringInstanceHelper.FormatProvider">
            <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
        </member>
        <member name="M:MessagePack.CodeGenerator.Generator.UnionTemplateBase.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
            <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
        </member>
        <member name="P:MessagePack.CodeGenerator.Generator.UnionTemplateBase.ToStringHelper">
            <summary>
            Helper to produce culture-oriented representation of an object as a string
            </summary>
        </member>
        <member name="T:MessagePack.UniversalCodeGenerator.MessagePackGenerateArguments">
            <summary>
            Represents arguments used to generate MessagePack formatters.
            </summary>
        </member>
        <member name="F:MessagePack.UniversalCodeGenerator.MessagePackGenerateArguments.IgnoreReadOnly">
            <summary>
            The value that determines whether to ignore read-only fields and properties.
            </summary>
        </member>
        <member name="F:MessagePack.UniversalCodeGenerator.MessagePackGenerateArguments.IgnoreNotMarked">
            <summary>
            The value that determines whether to ignore fields or properties which does not contain "KeyAttribute".
            <para>
            If this value is 'false', fields or properties must contains "KeyAttribute" and generator will throw exception if they not.
            </para>
            <para>
            This parameter will not be used if the generator forced to use map serialization.
            </para>
            </summary>
        </member>
        <member name="T:MessagePack.UniversalCodeGenerator.MessagePackUniversalCodeGeneratorUtility">
            <summary>
            Provides utilities to work with MessagePack UniversalCodeGenerator.
            </summary>
        </member>
        <member name="M:MessagePack.UniversalCodeGenerator.MessagePackUniversalCodeGeneratorUtility.Generate(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,MessagePack.UniversalCodeGenerator.MessagePackGenerateArguments)">
            <summary>
            Generates resolver and formatters files and other arguments.
            </summary>
            <param name="inputFiles">The collection of input .cs files.</param>
            <param name="resolverName">The generated resolver name.</param>
            <param name="namespaceRoot">The root namespace for generated resolver and formatters.</param>
            <param name="arguments">The generate arguments to control additional generation behaviour.</param>
        </member>
        <member name="M:MessagePack.UniversalCodeGenerator.MessagePackUniversalCodeGeneratorUtility.Generate(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.String,MessagePack.UniversalCodeGenerator.MessagePackGenerateArguments)">
            <summary>
            Generates resolver and formatters from the specified files and other arguments.
            </summary>
            <param name="inputFiles">The collection of input .cs files.</param>
            <param name="inputDirectories">The collection of directories with input .cs files.</param>
            <param name="conditionalSymbols">The collection of conditional compile symbols.</param>
            <param name="useMap">The value that determines whether to use map serialization.</param>
            <param name="resolverName">The generated resolver name.</param>
            <param name="namespaceRoot">The root namespace for generated resolver and formatters.</param>
            <param name="arguments">The generate arguments to control additional generation behaviour.</param>
        </member>
        <member name="M:MessagePack.UniversalCodeGenerator.MessagePackUniversalCodeGeneratorUtility.GenerateFormatters(System.Collections.Generic.IEnumerable{System.String},System.String,MessagePack.UniversalCodeGenerator.MessagePackGenerateArguments)">
            <summary>
            Generates formatters without resolver from the specified files and other arguments.
            </summary>
            <param name="inputFiles">The collection of input .cs files.</param>
            <param name="namespaceRoot">The root namespace for generated resolver and formatters.</param>
            <param name="arguments">The generate arguments to control additional generation behaviour.</param>
        </member>
        <member name="M:MessagePack.UniversalCodeGenerator.MessagePackUniversalCodeGeneratorUtility.GenerateFormatters(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,MessagePack.UniversalCodeGenerator.MessagePackGenerateArguments)">
            <summary>
            Generates formatters without resolver from the specified files and other arguments.
            </summary>
            <param name="inputFiles">The collection of input .cs files.</param>
            <param name="inputDirectories">The collection of directories with input .cs files.</param>
            <param name="conditionalSymbols">The collection of conditional compile symbols.</param>
            <param name="useMap">The value that determines whether to use map serialization.</param>
            <param name="namespaceRoot">The root namespace for generated resolver and formatters.</param>
            <param name="arguments">The generate arguments to control additional generation behaviour.</param>
        </member>
    </members>
</doc>
